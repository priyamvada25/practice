package com.att.ecom.cq.bundle.helpers;


import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.jcr.Node;
import javax.jcr.NodeIterator;
import javax.jcr.PathNotFoundException;
import javax.jcr.PropertyIterator;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.Value;
import javax.jcr.ValueFormatException;
import javax.servlet.ServletException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.sling.commons.json.JSONException;
import org.apache.sling.commons.json.JSONObject;
import org.apache.felix.scr.annotations.sling.SlingServlet;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.SlingSafeMethodsServlet;
import org.apache.sling.commons.json.JSONObject;
import org.omg.CORBA.IMP_LIMIT;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.apache.sling.commons.json.JSONArray;

//import com.att.ecom.cq.bundle.jiraservice.SVNCommit;




/**
 * This sling servlet read the metadat extraction node properties and commits the the xml response into SVN.
 * 
 */

@SlingServlet(paths = "/system/att/promotions")

public class PromotionsXMLBuilderServlet extends SlingSafeMethodsServlet{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static final Logger log = LoggerFactory.getLogger(PromotionsXMLBuilderServlet.class);
	
	private static final String JCR_CONTENT ="jcr:content";
	private static final String CONTENT = "content";
	private static final String DEVICE = "device";
	private static final String METAEXT_CONTENT="jcr:content/content";
	private static final String METADATA_NODE = "mextractioncomp";
	private static final String COMMIT_SVN_PROP = "commit_svn";
	private static final String OUTPUT_FORMAT_PROP = "output_format";
	private String COMMIT_SVN = "false";
	private String OUTPUT_FORMAT = "";
	private  static JSONObject jsonM = new JSONObject();
	String valArray[]= {"file:///C:/repos/localsvn/repo1/branches",
			"0","-1","pl983r","mNFp6fih"};
	
	DocumentBuilderFactory docFactory;
	DocumentBuilder docBuilder;
	Document doc;
	Element rootElement;
	Element appElement;
	String output = "";
	int indent = 2;

	@Override
	protected void doGet(final SlingHttpServletRequest request, final SlingHttpServletResponse response)
			throws ServletException, IOException {
		response.setContentType("application/xml");
		response.setCharacterEncoding("utf-8");	
		
		try{
			Node rootNode=null;	
			Node childNode=null;	
			
			docFactory = DocumentBuilderFactory.newInstance();
			docBuilder = docFactory.newDocumentBuilder();
			doc = docBuilder.newDocument();
			
			appElement = doc.createElement("add");
			
			Attr versionAttr = doc.createAttribute("version");
			versionAttr.setValue("1.0");
			Attr encodingAttr = doc.createAttribute("encoding");
			encodingAttr.setValue("UTF-8");
			Attr standaloneAttr = doc.createAttribute("standalone");
			standaloneAttr.setValue("no");
			
			
			doc.appendChild(appElement);
			
			
			ResourceResolver resourceResolver =request.getResourceResolver();
			javax.jcr.Session session = resourceResolver.adaptTo(Session.class);
			
			String requestURI = request.getRequestURI();
			String requestPath;
			if (requestURI.contains("jcr:content")) {
				requestPath = requestURI.split("jcr:content")[0];
			} else if (requestURI.contains("_jcr_content")) {
				requestPath = requestURI.split("_jcr_content")[0];
			} else if (requestURI.contains(".")) {
				requestPath = requestURI.split(".xml")[0];
			} else {
				requestPath = requestURI;
			}
			appElement.setAttribute("content_path", requestPath);
			rootNode =(javax.jcr.Node) session.getItem(resourceResolver.resolve(request).getPath());

			NodeIterator rootChildren = rootNode.getNodes();
			
			while(rootChildren.hasNext()){
				childNode = rootChildren.nextNode();
				if(childNode.getName().equalsIgnoreCase(JCR_CONTENT) && !childNode.hasNode(CONTENT)){
					continue;
				}
				if (null != childNode && childNode.hasNode(CONTENT)) {
					childNode = childNode.getParent();
				}
				if(null!=childNode && childNode.hasNode(METAEXT_CONTENT)) {
					childNode= childNode.getNode(METAEXT_CONTENT);				
					NodeIterator children = childNode.getNodes();
					while(children.hasNext()){
						Node promotionchildNode = children.nextNode();
						if(promotionchildNode.getName().equalsIgnoreCase(METADATA_NODE)){
							for (PropertyIterator value1 =  promotionchildNode.getProperties(); value1.hasNext();) {
								javax.jcr.Property prop1 = value1.nextProperty();
								if(prop1.getName().equalsIgnoreCase(COMMIT_SVN_PROP)){
										COMMIT_SVN = prop1.getValue().getString();
										System.out.println("COMMIT_SVN ----"+COMMIT_SVN);
									}
								if(prop1.getName().equalsIgnoreCase(OUTPUT_FORMAT_PROP)){
								OUTPUT_FORMAT = prop1.getValue().getString();
								System.out.println("OUTPUT_FOrmat ----"+OUTPUT_FORMAT.toString());
								}
								
						}
							System.out.println("Hit-----------");
							
						if(null != promotionchildNode && promotionchildNode.hasNodes()){
							
							//For getting data in JSON format
							if(promotionchildNode.getName().equalsIgnoreCase(METADATA_NODE)){
								Node img_prop = null;
								promotionchildNode.getNodes().getSize();
								if(OUTPUT_FORMAT.equalsIgnoreCase(CONTENT)){
									img_prop = promotionchildNode.getNode("contentImg_prop");
									System.out.println("img_prop content------"+img_prop.getName().toString() );
								}
								else if(OUTPUT_FORMAT.equalsIgnoreCase(DEVICE)){
									img_prop = promotionchildNode.getNode("deviceImg_prop");
									System.out.println("img_prop device------"+img_prop.getName().toString() );
								}
								
								/*if(OUTPUT_FORMAT.equalsIgnoreCase("JSON")||OUTPUT_FORMAT.equalsIgnoreCase("BOTH")){
									jsonM.put("Root_Node", requestPath);
								}*/
								
								NodeIterator img_propIterator = img_prop.getNodes();
								
								//JSONArray arrayimg = new JSONArray();
								
								while(img_propIterator.hasNext()){
									JSONArray arrayimg = new JSONArray();
									Element docrootChild = CreateDocs();
									if(img_prop.getName().equalsIgnoreCase("contentImg_prop")){
										appElement.setAttribute("image_type", "Content_Image");
									}
									else{
										appElement.setAttribute("image_type", "Device_Image");
									}
									System.out.println("Added New json array priya-----------");
									List<String> itemNameList = new ArrayList<String>();
									
									Node propImage= img_propIterator.nextNode();
									for (PropertyIterator value =  propImage.getProperties(); value.hasNext();) {
										JSONObject item = new JSONObject();
										javax.jcr.Property prop = value.nextProperty();
										//prop.getName().contains("id");
									    item.put(prop.getName(), prop.getValue().getString());
										itemNameList.add(prop.getName());
										System.out.println("Item ---"+item);
									    arrayimg.put(item);
									  } 
									String pos= "Image_"+img_propIterator.getPosition();
									//if(OUTPUT_FORMAT.equalsIgnoreCase(CONTENT)||OUTPUT_FORMAT.equalsIgnoreCase("BOTH")){
										System.out.println("Inside putput format condition"+OUTPUT_FORMAT);
										
										createXMLField(propImage, docrootChild, itemNameList,pos);
									//}
									/*else if(OUTPUT_FORMAT.equalsIgnoreCase("JSON")||OUTPUT_FORMAT.equalsIgnoreCase("BOTH")){
										System.out.println("inside json and both");
										jsonM.put("Image_"+img_propIterator.getPosition(), arrayimg);
									}*/
									//arrayimg = new JSONArray();
									//itemNameList = new ArrayList<String>();									
								}
								
								}
					}
					
				}
					}/*if(OUTPUT_FORMAT.equalsIgnoreCase("JSON")||OUTPUT_FORMAT.equalsIgnoreCase("BOTH")){
						System.out.println("Metadata in JSON format " + jsonM);
					}*/
					
						}
						
					}
			SVNCommit.main(valArray);
			writeResponsetoFile(response);
					
		
		}catch(Exception e){
			System.out.println("Error in generating XML response from servlet"+e);
			throw new ServletException(e);
		}	
	}

    /**
     * @param promotionchildNode
     * @param docroot
     * @param fieldNames
     * @throws RepositoryException
     * @throws PathNotFoundException
     * @throws ValueFormatException
     * @throws IllegalStateException
     */
    private void createXMLField(javax.jcr.Node promotionchildNode, Element docroot, List<String> fieldNames,String pos)
            throws RepositoryException, PathNotFoundException, ValueFormatException, IllegalStateException {
        Value[] requireKeys;
        for (String strField : fieldNames) {
        	if(promotionchildNode.hasProperty(strField)){
        		if (promotionchildNode.getProperty(strField).isMultiple()) {
        			requireKeys = promotionchildNode.getProperty(strField).getValues();
        			for (int count = 0; count < requireKeys.length; count++){											
        				CreateField(docroot,"name",strField,requireKeys[count].getString(),pos);
        			}																				
        		}else{	
        			System.out.println("inside createxml");
        			CreateField(docroot,"name",strField,promotionchildNode.getProperty(strField).getString(),pos);										
        		}																
        	}
        }
    }
	
	protected Element CreateDocs(){
		Element docElement = doc.createElement("doc");
		appElement.appendChild(docElement);			
		return docElement;
	}
	
	protected void CreateField(Element docElement, String prmStrAttrName, String prmStrAttrVal, String prmStrVal,String pos){
		String isId= "false";
		
		if(prmStrAttrVal.equals("searchTerms")){
		    prmStrVal = prmStrVal.toLowerCase();
		}
		prmStrAttrVal=prmStrAttrVal.toLowerCase();
		if(prmStrAttrVal.equals("sdate_req")||prmStrAttrVal.equals("enddate_req")){
		    try {
		    	System.out.println("Start date and end date--------");
				prmStrVal = dateFormatter(prmStrVal);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		if(prmStrAttrVal.contains("_location")){
			Element fieldElementloc = doc.createElement("location");
			//itera
			Element subnode = doc.createElement(prmStrAttrVal);
			subnode.appendChild(doc.createTextNode(prmStrVal.trim()));
			fieldElementloc.appendChild(subnode);
			docElement.appendChild(fieldElementloc);
		}
		
		if(!prmStrAttrVal.contains("jcr") && !prmStrAttrVal.contains("_location")){
		Element fieldElement = doc.createElement(prmStrAttrVal);	
	    //fieldElement.setAttribute(prmStrAttrVal, prmStrVal.trim());
		fieldElement.appendChild(doc.createTextNode(prmStrVal.trim()));
		if(prmStrAttrVal.contains("_req")){
			isId= "true";
			fieldElement.setAttribute("required", isId);
		}
		docElement.appendChild(fieldElement);
		docElement.setAttribute("image_no", pos);
		}
	}
	
	
	public String dateFormatter(String dateTime) throws Exception{
		SimpleDateFormat dateFormatExisting = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
		Date utcDate= dateFormatExisting.parse(dateTime);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateTime = dateFormat.format(utcDate);
		return dateTime;
	}
	public void writeResponsetoFile(SlingHttpServletResponse response) throws Exception {
		System.out.println("Inside writing response to file"+response.toString());
		//if(OUTPUT_FORMAT.equalsIgnoreCase("XML")||OUTPUT_FORMAT.equalsIgnoreCase("BOTH")){
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		transformerFactory.setAttribute("indent-number", indent);
		Transformer transformer = transformerFactory.newTransformer();
		transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		DOMSource source = new DOMSource(doc);
		StreamResult streamResult = new StreamResult(response.getWriter());
		transformer.transform(source, streamResult);
		output = streamResult.getWriter().toString();
		
		streamResult = new StreamResult(new File("C:/Users/priyamvada.l/Desktop/metadata_xml/metadata.xml"));
        transformer.transform(source, streamResult);
		//}
		/*else if(OUTPUT_FORMAT.equalsIgnoreCase("JSON")||OUTPUT_FORMAT.equalsIgnoreCase("BOTH")){
			String filePath = "C:/Users/priyamvada.l/Desktop/metadata_xml";
			File f = new File(filePath);
			f.createNewFile();
			//if(!f.exists() && !f.isDirectory()) { 
				java.io.FileWriter file = new java.io.FileWriter(filePath);
			//}
            
			file.write(jsonM.toString());
			System.out.println("Closed the file");
			file.close();
			System.out.println("Written in json file");
		}*/
	}
	
	
}
